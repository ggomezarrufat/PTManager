const io = require('socket.io-client');

console.log('üéØ PRUEBA SIMPLE: CAMBIO AUTOM√ÅTICO DE NIVEL');
console.log('===============================================');
console.log('Configuraci√≥n: 30 segundos por nivel');
console.log('');

const socket = io('http://localhost:3001');
const tournamentId = 'f2c4e932-3b85-4d91-a528-4b5e278fbf9a';

let currentLevel = 1;
let testStep = 0;

socket.on('connect', () => {
  console.log('‚úÖ Conectado al servidor');
  socket.emit('join-tournament', { tournamentId, userId: 'simple-auto-test' });
});

socket.on('clock-sync', (data) => {
  testStep++;
  console.log(`\nüìã PASO ${testStep}: Estado inicial recibido`);
  console.log(`   Nivel: ${data.current_level}`);
  console.log(`   Tiempo: ${data.time_remaining_seconds}s`);
  console.log(`   Estado: ${data.is_paused ? 'PAUSADO' : 'ACTIVO'}`);

  currentLevel = data.current_level;

  // Verificar que estamos en el estado correcto
  if (data.current_level === 1 && data.time_remaining_seconds === 30 && data.is_paused === true) {
    testStep++;
    console.log(`\nüìã PASO ${testStep}: Estado correcto detectado ‚úÖ`);
    console.log('‚ñ∂Ô∏è Reanudando reloj...');
    socket.emit('resume-clock', { tournamentId });
  } else {
    console.log('\n‚ùå ERROR: El reloj no est√° en el estado esperado para la prueba');
    console.log('   Esperado: Nivel 1, 30s, PAUSADO');
    console.log(`   Actual: Nivel ${data.current_level}, ${data.time_remaining_seconds}s, ${data.is_paused ? 'PAUSADO' : 'ACTIVO'}`);
    socket.disconnect();
  }
});

socket.on('clock-pause-toggled', (data) => {
  if (!data.is_paused) {
    testStep++;
    console.log(`\nüìã PASO ${testStep}: Reloj reanudado exitosamente ‚úÖ`);
    console.log('‚è∞ Esperando cuenta regresiva autom√°tica: 30s ‚Üí 29s ‚Üí ... ‚Üí 0s');
    console.log('üéØ Cuando llegue a 0s, deber√≠a cambiar autom√°ticamente al nivel 2');
    console.log('');
  }
});

socket.on('clock-update', (data) => {
  const timestamp = new Date().toLocaleTimeString();
  console.log(`[${timestamp}] ‚è∞ NIVEL ${currentLevel}: ${data.time_remaining_seconds}s restantes`);

  if (data.time_remaining_seconds <= 5) {
    console.log(`   ‚ö†Ô∏è ¬°Atenci√≥n! Quedan ${data.time_remaining_seconds}s en el nivel ${currentLevel}`);
  }
});

socket.on('level-changed', (data) => {
  testStep++;
  const timestamp = new Date().toLocaleTimeString();

  console.log(`\nüéØ [${timestamp}] ¬°CAMBIO DE NIVEL AUTOM√ÅTICO DETECTADO!`);
  console.log(`   Nivel anterior: ${currentLevel}`);
  console.log(`   Nuevo nivel: ${data.new_level}`);
  console.log(`   Nuevo tiempo: ${data.clock_state.time_remaining_seconds}s`);
  console.log('');
  console.log('‚úÖ ¬°PRUEBA EXITOSA! El cambio autom√°tico de nivel est√° funcionando correctamente');
  console.log('');

  currentLevel = data.new_level;

  // Terminar la prueba despu√©s del primer cambio de nivel
  setTimeout(() => {
    console.log('üèÅ Finalizando prueba...');
    socket.emit('pause-clock', { tournamentId });
    setTimeout(() => socket.disconnect(), 1000);
  }, 2000);
});

socket.on('disconnect', () => {
  console.log('\nüëã Desconectado del servidor');

  console.log('\nüìä RESUMEN FINAL:');
  console.log('================');
  console.log(`   ‚úÖ Conexi√≥n WebSocket: OK`);
  console.log(`   ‚úÖ Reloj reanudado: OK`);
  console.log(`   ‚úÖ Cambios de nivel autom√°ticos: ${testStep >= 4 ? 'OK' : 'FALL√ì'}`);
  console.log(`   ‚úÖ Pasos completados: ${testStep}/4`);

  if (testStep >= 4) {
    console.log('\nüéâ ¬°FELICITACIONES! El sistema de cambio autom√°tico de nivel est√° funcionando perfectamente');
    console.log('   üìà Funcionalidades verificadas:');
    console.log('      ‚úÖ Control de reloj (pausa/reanudar)');
    console.log('      ‚úÖ Cuenta regresiva autom√°tica');
    console.log('      ‚úÖ Cambio autom√°tico de nivel cuando llega a cero');
    console.log('      ‚úÖ Sincronizaci√≥n en tiempo real entre usuarios');
  } else {
    console.log('\n‚ùå La prueba no se complet√≥ correctamente');
  }
});

socket.on('error', (error) => {
  console.error('‚ùå Error de conexi√≥n:', error.message);
});

console.log('üöÄ Iniciando prueba de cambio autom√°tico de nivel...');
console.log('   Esta prueba deber√≠a demostrar:');
console.log('   1. Conexi√≥n exitosa al torneo');
console.log('   2. Reanudaci√≥n del reloj');
console.log('   3. Cuenta regresiva autom√°tica');
console.log('   4. Cambio autom√°tico de nivel cuando llegue a cero');
console.log('');
